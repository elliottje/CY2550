#!/usr/bin/env python

import random
import string
import argparse


# generates password using kcd method based on user specs
def generate_password(words, caps, numbers, symbols):
    # load the word list
    with open('words.txt', 'r') as f:
        word_list = f.read().splitlines()

    # Generate password
    password_words = random.sample(word_list, words)

    if caps > 0:
        if caps > words:
            password_words = capitalize_random_words(password_words, words)
        else:
            password_words = capitalize_random_words(password_words, caps)

    password = ''.join(password_words)

    if numbers > 0:
        password = insert_random_numbers(password, numbers)

    if symbols > 0:
        password = insert_random_symbols(password, symbols)

    return password


def capitalize_random_words(words, num_words):
    capitalized_words = words.copy()
    selected_words = random.sample(capitalized_words, num_words)

    for i, word in enumerate(capitalized_words):
        if word in selected_words:
            capitalized_words[i] = word.capitalize()

    return capitalized_words


def insert_random_numbers(password, num_numbers):
    for _ in range(num_numbers):
        random_number = random.randint(0, 9)
        insert_index = random.randint(0, len(password))
        password = password[:insert_index] + str(random_number) + password[insert_index:]

    return password


def insert_random_symbols(password, num_symbols):
    symbols = string.punctuation
    for _ in range(num_symbols):
        random_symbol = random.choice(symbols)
        insert_index = random.randint(0, len(password))
        password = password[:insert_index] + random_symbol + password[insert_index:]

    return password


def main():
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description='Generate a secure, memorable password using the XKCD method')
    parser.add_argument('-w', '--words', type=int, default=4,
                        help='include WORDS words in the password (default=4)')
    parser.add_argument('-c', '--caps', type=int, default=0,
                        help='capitalize the first letter of CAPS random words (default=0)')
    parser.add_argument('-n', '--numbers', type=int, default=0,
                        help='insert NUMBERS random numbers in the password (default=0)')
    parser.add_argument('-s', '--symbols', type=int, default=0,
                        help='insert SYMBOLS random symbols in the password (default=0)')
    args = parser.parse_args()

    # Generate password
    password = generate_password(args.words, args.caps, args.numbers, args.symbols)
    print(password)


if __name__ == '__main__':
    main()


